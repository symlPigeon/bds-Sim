"""
Author: symlPigeon 2163953074@qq.com
Date: 2023-02-06 15:17:58
LastEditTime: 2023-02-06 15:42:11
LastEditors: symlPigeon 2163953074@qq.com
Description: process the data generated by bdsTX module
FilePath: /bds-Sim/signalProcess/util/data_util.py
"""

from typing import Any, Optional, Union

import numpy as np

from signalProcess.common.base_types import sizedIterableSource


class baseBinSource(sizedIterableSource):
    def __init__(
        self, data: str, bitwidth: int, length: Optional[int], repeat: bool = False
    ) -> None:
        self._data = data
        self._repeat = repeat if repeat is not None else True
        self._idx = 0
        assert bitwidth <= 8, "Invalid bitwidth: bitwidth must <= 8"
        self._bitwidth = bitwidth
        if length is not None:
            assert (
                length <= len(data) * bitwidth
            ), f"Invalid source length: expected length({length}) <= data_length * bitwidth({len(data) * bitwidth})"
            self._length = length
        else:
            self._length = len(data) * bitwidth

    def __len__(self) -> int:
        return self._length

    def __iter__(self):
        return self
    
    def __getitem__(self, idx: int) -> np.uint8:
        if not self._repeat and idx >= self._length:
            raise IndexError(f"Index out of range: {idx} >= {self._length}")
        idx = idx % self._length
        idx_s = idx // self._bitwidth
        idx_b = idx % self._bitwidth
        return np.uint8(
            int(self._data[idx_s], pow(2, self._bitwidth)) >> (self._bitwidth - idx_b - 1)
            & 0x1
        )

    def __next__(self) -> np.uint8:
        if self._idx >= self._length:
            if self._repeat:
                self._idx = 0
            else:
                raise StopIteration
        ret = self[self._idx]
        self._idx += 1
        return ret
    
    def is_repeatable(self) -> bool:
        return self._repeat
        
    def reset(self) -> None:
        """
        重设数据源idx
        """
        return None


class vectorSource(sizedIterableSource):
    def __init__(self, data: Union[list, np.ndarray], repeat: bool = False) -> None:
        self._data = data
        self._repeat = repeat if repeat is not None else True
        self._idx = 0
        self._len = len(data)
    
    def __len__(self) -> int:
        return self._len
    
    def __getitem__(self, idx: int) -> Any:
        if not self._repeat and idx >= self._len:
            raise IndexError(f"Index out of range: {idx} >= {self._len}")
        return self._data[idx % self._len]
    
    def __iter__(self):
        return self
    
    def __next__(self):
        if self._idx >= self._len:
            if self._repeat:
                self._idx = 0
            else:
                raise StopIteration
        ret = self.__getitem__(self._idx)
        self._idx += 1
        return ret
    
    def is_repeatable(self) -> bool:
        return self._repeat


class hexToBinSource(baseBinSource):
    def __init__(self, data: str, length: Optional[int], repeat: bool = False) -> None:
        """初始化数据源

        Args:
            data (str): 数据，十六进制字符串
            length (Optional[int]): 数据长度，可选项，如果不指定那么长度为data对应的二进制长度
            repeat (bool, optional): 数据是否重复. Defaults to False.
        """
        super().__init__(data, 4, length, repeat)


class octToBinSource(baseBinSource):
    def __init__(self, data: str, length: Optional[int], repeat: bool = False) -> None:
        """初始化数据源

        Args:
            data (str): 数据，八进制字符串
            length (Optional[int]): 数据长度，可选项，如果不指定那么长度为data对应的二进制长度
            repeat (bool, optional): 数据是否重复. Defaults to False.
        """
        super().__init__(data, 3, length, repeat)


if __name__ == "__main__":
    data = "01234567890abcdef"
    source = hexToBinSource(data, None, True)
    for i in range(len(data) * 4):
        print(next(source), end="")
    print()
    print(source[5])
    print(source[114514])
    
    data = [10, 20, 30, 40, 50]
    source2 = vectorSource(data, True)
    for i in range(len(data) * 2):
        print(next(source2), end=" ")
    