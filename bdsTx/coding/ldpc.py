"""
Author: symlpigeon
Date: 2022-11-11 11:34:16
LastEditTime: 2022-11-11 11:34:18
LastEditors: symlpigeon
Description: 多进制LDPC编码
FilePath: /sim_bds/python/coding/ldpc.py
"""

import numpy as np
import galois
from ldpc_mat import ldpcMat_100_200, ldpcMat_44_88


def ldpc64(mat: np.ndarray, data: np.ndarray) -> np.ndarray:
    """LDPC编码

    Args:
        mat (np.ndarray): 生成矩阵
        data (np.ndarray): 数据

    Returns:
        np.ndarray: 编码
    """
    Poly = galois.Poly([1, 0, 0, 0, 0, 1, 1])
    GF = galois.GF(2**6, irreducible_poly=Poly)
    mat = GF(mat)
    assert mat.shape[0] == data.shape[0]
    data = GF(data)
    return np.array(np.dot(mat.T, data.T).T.tolist(), dtype=np.uint8)


if __name__ == "__main__":
    data = "001010 110010 010011 100001 001010 100110 010000 101001 101100 101111\
 011100 000101 001110 111010 001001 110100 100010 111111 000101 011100\
 000110 111101 000000 110001 110100 110111 000101 011001 010000 110011\
 011011 111010 001011 010000 001001 001000 110111 100101 100011 001001\
 110110 100111 010110 100000 011001 000100 001111 000111 001011 001111\
 011010 000011 111001 111100 011111 011111 010101 111001 010111 000111\
 110001 011000 001111 011001 000110 001000 111100 111101 100100 000011\
 001111 010110 110100 000000 000010 001010 101001 101110 101001 011100\
 100011 010010 101111 001100 101011 001011 010111 101000 110001 000101\
 111011 110001 011111 011011 011100 010011 100000 100000 110100 110010"
    data = np.array([int(i, 2) for i in data.split(" ")])
    mat = ldpcMat_100_200().mat()
    enc = ldpc64(mat, data)
    check_data = "001010 110010 010011 100001 001010 100110 010000 101001 101100 101111\
 011100 000101 001110 111010 001001 110100 100010 111111 000101 011100\
 000110 111101 000000 110001 110100 110111 000101 011001 010000 110011\
 011011 111010 001011 010000 001001 001000 110111 100101 100011 001001\
 110110 100111 010110 100000 011001 000100 001111 000111 001011 001111\
 011010 000011 111001 111100 011111 011111 010101 111001 010111 000111\
 110001 011000 001111 011001 000110 001000 111100 111101 100100 000011\
 001111 010110 110100 000000 000010 001010 101001 101110 101001 011100\
 100011 010010 101111 001100 101011 001011 010111 101000 110001 000101\
 111011 110001 011111 011011 011100 010011 100000 100000 110100 110010\
 100110 000000 110110 011100 111101 101001 101010 100111 000001 111101\
 011100 100101 111110 101100 100000 000000 111001 010100 101101 110010\
 101000 000100 111100 110000 101011 000101 100011 110111 000111 101000\
 010100 110011 011011 000000 110110 001110 001001 111111 001000 010100\
 011100 010111 011010 001111 011001 100011 100100 001111 010001 100101\
 100000 011011 101101 110010 101000 001100 010101 111000 001110 101101\
 111011 011010 110111 110111 011011 101010 011001 011011 100011 101011\
 110001 101001 011111 100010 010000 010111 101011 111101 000011 010110\
 100111 111000 000111 100101 001100 111011 111011 110111 011111 010010\
 011110 100000 011101 011011 110110 111100 111100 001101 001000 101111"
    check_data = np.array([int(i, 2) for i in check_data.split(" ")])
    for idx in range(200):
        if enc[idx] != check_data[idx]:
            print(
                f"Mismatch detected at {idx}, expected {check_data[idx]}, got {enc[idx]}"
            )

    data = "001010 110010 010011 100001 001010 100110 010000 101001 101100 101111\
 011100 000101 001110 111010 001001 110100 100010 111111 000101 011100\
 000110 111101 000000 110001 110100 110111 000101 011001 010000 110011\
 011011 111010 001011 010000 001001 001000 110111 100101 100011 001001\
 110110 100111 010110 100000"
    data = np.array([int(i, 2) for i in data.split(" ")])
    mat = ldpcMat_44_88().mat()
    enc = ldpc64(mat, data)
    check_data = "001010 110010 010011 100001 001010 100110 010000 101001 101100 101111\
 011100 000101 001110 111010 001001 110100 100010 111111 000101 011100\
 000110 111101 000000 110001 110100 110111 000101 011001 010000 110011\
 011011 111010 001011 010000 001001 001000 110111 100101 100011 001001\
 110110 100111 010110 100000 101001 101000 101011 011101 111000 100000\
 000001 001111 110111 010101 100111 001100 000010 101001 001000 100110\
 000011 101000 110101 110110 010101 001000 010100 011110 111110 101001\
 000001 000001 101110 100000 101001 110101 110001 011111 001001 000011\
 010010 011011 101100 010111 100001 000001 000110 000101"
    check_data = np.array([int(i, 2) for i in check_data.split(" ")])
    for idx in range(88):
        if enc[idx] != check_data[idx]:
            print(
                f"Mismatch detected at {idx}, expected {check_data[idx]}, got {enc[idx]}"
            )
